Repo Rover - Project Structure
================================================================================================

repo-rover/
â”‚
â”œâ”€â”€ frontend/                               # React/TypeScript Frontend (NEW)
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ ChatPanel.tsx                  # Chat interface for Q&A with code
â”‚   â”‚   â”œâ”€â”€ Icons.tsx                      # Reusable icon components
â”‚   â”‚   â””â”€â”€ PdfViewer.tsx                  # PDF viewer for research papers
â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â””â”€â”€ geminiService.ts               # Gemini API integration
â”‚   â”œâ”€â”€ App.tsx                            # Main application component
â”‚   â”œâ”€â”€ index.html                         # HTML entry point
â”‚   â”œâ”€â”€ index.tsx                          # React entry point
â”‚   â”œâ”€â”€ metadata.json                      # Frontend metadata
â”‚   â””â”€â”€ types.ts                           # TypeScript type definitions
â”‚
â”œâ”€â”€ backend/                                # Python Backend (MOVED from ./src)
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ discovery/
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â”œâ”€â”€ paper_finder.py           # Finds papers on ArXiv
â”‚   â”‚   â”‚   â””â”€â”€ repo_finder.py            # Finds GitHub repos via Papers with Code
â”‚   â”‚   â”œâ”€â”€ synthesis/
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â””â”€â”€ gemini_synthesizer.py     # Code synthesis with Gemini
â”‚   â”‚   â”œâ”€â”€ understanding/
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â”œâ”€â”€ chroma_client.py          # ChromaDB wrapper with Google embeddings
â”‚   â”‚   â”‚   â”œâ”€â”€ code_indexer.py           # Indexes .py, .txt, .md files
â”‚   â”‚   â”‚   â””â”€â”€ query_pipeline.py         # RAG pipeline (retrieval + generation)
â”‚   â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â”œâ”€â”€ config.py                 # Configuration management (.env loader)
â”‚   â”‚   â”‚   â”œâ”€â”€ gcp_auth.py               # GCP OAuth for Gemini API
â”‚   â”‚   â”‚   â””â”€â”€ repo_utils.py             # Git operations (clone, analyze)
â”‚   â”‚   â””â”€â”€ main.py                       # CLI entry point
â”‚   â””â”€â”€ environment.yml                    # Conda environment (MOVED from root)
â”‚
â”œâ”€â”€ cloned_repos/                          # Downloaded GitHub repositories
â”‚   â””â”€â”€ [repository-name]/                # e.g., gcn/, transformers/, etc.
â”‚
â”œâ”€â”€ chroma_db/                             # ChromaDB persistent storage
â”‚   â””â”€â”€ chroma.sqlite3                    # SQLite database for vectors
â”‚
â”œâ”€â”€ papers/                                # Downloaded research papers
â”‚   â””â”€â”€ [arxiv-id].pdf                    # e.g., 1706.03762.pdf
â”‚
â”œâ”€â”€ .claude/                               # Claude Code IDE settings
â”‚
â”œâ”€â”€ Documentation (Root Level)
â”‚   â”œâ”€â”€ README.md                         # Main project README (UPDATED)
â”‚   â”œâ”€â”€ QUICKSTART.md                     # Quick start guide
â”‚   â””â”€â”€ PROJECT_STRUCTURE.txt             # This file (NEW)
â”‚
â”œâ”€â”€ Configuration Files (Root Level)
â”‚   â”œâ”€â”€ .env                              # Environment variables (SHARED)
â”‚   â”‚                                     # - GEMINI_API_KEY
â”‚   â”‚                                     # - GCP_PROJECT_ID, GCP_CLIENT_ID, GCP_CLIENT_SECRET
â”‚   â”‚                                     # - CHROMA_PATH
â”‚   â””â”€â”€ .gitignore                        # Git ignore (UPDATED with frontend ignores)
â”‚
â””â”€â”€ Temporary/Build Files (Gitignored)
    â”œâ”€â”€ __pycache__/                      # Python bytecode cache
    â”œâ”€â”€ *.sqlite3                         # ChromaDB databases
    â”œâ”€â”€ gcp_token.json                    # OAuth token (auto-generated)
    â””â”€â”€ [future: node_modules/, dist/]    # Frontend builds (when implemented)

================================================================================================

KEY CHANGES FROM PREVIOUS STRUCTURE:
================================================================================================

1. MOVED: ./src â†’ ./backend/src
   - All Python code moved to backend folder
   - No code changes needed - imports still work

2. MOVED: ./environment.yml â†’ ./backend/environment.yml
   - Python dependencies now in backend folder

3. CREATED: ./frontend folder with React/TypeScript structure
   - 9 empty files ready for implementation
   - Component structure follows best practices

4. UPDATED: .gitignore
   - Added frontend ignores (node_modules, dist, build)
   - Added ChromaDB ignores (*.sqlite3)

5. SHARED: .env, cloned_repos/, chroma_db/, papers/
   - These remain in root for both frontend/backend access

================================================================================================

RUNNING THE APPLICATION:
================================================================================================

Backend (Python):
  $ python backend/src/main.py --paper "Attention Is All You Need"
  $ python backend/src/main.py --test

Frontend (React) - Coming Soon:
  $ cd frontend && npm install && npm run dev

================================================================================================

STATUS: âœ… Backend Fully Functional | ðŸ”„ Frontend Structure Ready for Implementation
================================================================================================
